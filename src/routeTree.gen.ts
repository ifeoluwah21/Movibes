/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HomeLayoutRouteImport } from './routes/_homeLayout'
import { Route as AuthLayoutRouteImport } from './routes/_authLayout'
import { Route as HomeLayoutIndexRouteImport } from './routes/_homeLayout/index'
import { Route as HomeLayoutUpcomingRouteImport } from './routes/_homeLayout/upcoming'
import { Route as HomeLayoutTvSeriesRouteImport } from './routes/_homeLayout/tv-series'
import { Route as HomeLayoutMoviesRouteImport } from './routes/_homeLayout/movies'
import { Route as AuthLayoutSignupRouteImport } from './routes/_authLayout/signup'
import { Route as AuthLayoutSigninRouteImport } from './routes/_authLayout/signin'

const HomeLayoutRoute = HomeLayoutRouteImport.update({
  id: '/_homeLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/_authLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeLayoutIndexRoute = HomeLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HomeLayoutRoute,
} as any)
const HomeLayoutUpcomingRoute = HomeLayoutUpcomingRouteImport.update({
  id: '/upcoming',
  path: '/upcoming',
  getParentRoute: () => HomeLayoutRoute,
} as any)
const HomeLayoutTvSeriesRoute = HomeLayoutTvSeriesRouteImport.update({
  id: '/tv-series',
  path: '/tv-series',
  getParentRoute: () => HomeLayoutRoute,
} as any)
const HomeLayoutMoviesRoute = HomeLayoutMoviesRouteImport.update({
  id: '/movies',
  path: '/movies',
  getParentRoute: () => HomeLayoutRoute,
} as any)
const AuthLayoutSignupRoute = AuthLayoutSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthLayoutSigninRoute = AuthLayoutSigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => AuthLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/signin': typeof AuthLayoutSigninRoute
  '/signup': typeof AuthLayoutSignupRoute
  '/movies': typeof HomeLayoutMoviesRoute
  '/tv-series': typeof HomeLayoutTvSeriesRoute
  '/upcoming': typeof HomeLayoutUpcomingRoute
  '/': typeof HomeLayoutIndexRoute
}
export interface FileRoutesByTo {
  '/signin': typeof AuthLayoutSigninRoute
  '/signup': typeof AuthLayoutSignupRoute
  '/movies': typeof HomeLayoutMoviesRoute
  '/tv-series': typeof HomeLayoutTvSeriesRoute
  '/upcoming': typeof HomeLayoutUpcomingRoute
  '/': typeof HomeLayoutIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authLayout': typeof AuthLayoutRouteWithChildren
  '/_homeLayout': typeof HomeLayoutRouteWithChildren
  '/_authLayout/signin': typeof AuthLayoutSigninRoute
  '/_authLayout/signup': typeof AuthLayoutSignupRoute
  '/_homeLayout/movies': typeof HomeLayoutMoviesRoute
  '/_homeLayout/tv-series': typeof HomeLayoutTvSeriesRoute
  '/_homeLayout/upcoming': typeof HomeLayoutUpcomingRoute
  '/_homeLayout/': typeof HomeLayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/signin'
    | '/signup'
    | '/movies'
    | '/tv-series'
    | '/upcoming'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/signin' | '/signup' | '/movies' | '/tv-series' | '/upcoming' | '/'
  id:
    | '__root__'
    | '/_authLayout'
    | '/_homeLayout'
    | '/_authLayout/signin'
    | '/_authLayout/signup'
    | '/_homeLayout/movies'
    | '/_homeLayout/tv-series'
    | '/_homeLayout/upcoming'
    | '/_homeLayout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
  HomeLayoutRoute: typeof HomeLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_homeLayout': {
      id: '/_homeLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof HomeLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authLayout': {
      id: '/_authLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_homeLayout/': {
      id: '/_homeLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof HomeLayoutIndexRouteImport
      parentRoute: typeof HomeLayoutRoute
    }
    '/_homeLayout/upcoming': {
      id: '/_homeLayout/upcoming'
      path: '/upcoming'
      fullPath: '/upcoming'
      preLoaderRoute: typeof HomeLayoutUpcomingRouteImport
      parentRoute: typeof HomeLayoutRoute
    }
    '/_homeLayout/tv-series': {
      id: '/_homeLayout/tv-series'
      path: '/tv-series'
      fullPath: '/tv-series'
      preLoaderRoute: typeof HomeLayoutTvSeriesRouteImport
      parentRoute: typeof HomeLayoutRoute
    }
    '/_homeLayout/movies': {
      id: '/_homeLayout/movies'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof HomeLayoutMoviesRouteImport
      parentRoute: typeof HomeLayoutRoute
    }
    '/_authLayout/signup': {
      id: '/_authLayout/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthLayoutSignupRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_authLayout/signin': {
      id: '/_authLayout/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof AuthLayoutSigninRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
  }
}

interface AuthLayoutRouteChildren {
  AuthLayoutSigninRoute: typeof AuthLayoutSigninRoute
  AuthLayoutSignupRoute: typeof AuthLayoutSignupRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthLayoutSigninRoute: AuthLayoutSigninRoute,
  AuthLayoutSignupRoute: AuthLayoutSignupRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

interface HomeLayoutRouteChildren {
  HomeLayoutMoviesRoute: typeof HomeLayoutMoviesRoute
  HomeLayoutTvSeriesRoute: typeof HomeLayoutTvSeriesRoute
  HomeLayoutUpcomingRoute: typeof HomeLayoutUpcomingRoute
  HomeLayoutIndexRoute: typeof HomeLayoutIndexRoute
}

const HomeLayoutRouteChildren: HomeLayoutRouteChildren = {
  HomeLayoutMoviesRoute: HomeLayoutMoviesRoute,
  HomeLayoutTvSeriesRoute: HomeLayoutTvSeriesRoute,
  HomeLayoutUpcomingRoute: HomeLayoutUpcomingRoute,
  HomeLayoutIndexRoute: HomeLayoutIndexRoute,
}

const HomeLayoutRouteWithChildren = HomeLayoutRoute._addFileChildren(
  HomeLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
  HomeLayoutRoute: HomeLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
